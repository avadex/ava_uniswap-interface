{"version":3,"file":"redux-multicall.cjs.production.min.js","sources":["../src/constants.ts","../src/utils/callKeys.ts","../src/hooks.ts","../src/slice.ts","../node_modules/regenerator-runtime/runtime.js","../src/utils/retry.ts","../src/updater.tsx","../src/utils/useDebounce.ts","../src/utils/chunkArray.ts","../src/create.ts"],"sourcesContent":["import { CallResult, ListenerOptions } from './types'\n\nexport const DEFAULT_CALL_GAS_REQUIRED = 1_000_000\nexport const DEFAULT_CHUNK_GAS_REQUIRED = 200_000\nexport const CHUNK_GAS_LIMIT = 100_000_000\nexport const CONSERVATIVE_BLOCK_GAS_LIMIT = 10_000_000 // conservative, hard-coded estimate of the current block gas limit\n\n// Consts for hooks\nexport const INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n","import { Call } from '../types'\n\nexport function toCallKey(call: Call): string {\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n","import { BigNumber, Contract, utils } from 'ethers'\nimport { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { INVALID_RESULT } from './constants'\nimport type { MulticallContext } from './context'\nimport type { Call, CallResult, CallState, CallStateResult, ListenerOptions, WithMulticallState } from './types'\nimport { parseCallKey, toCallKey } from './utils/callKeys'\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  calls: (Call | undefined)[],\n  { blocksPerFetch }: ListenerOptions = { blocksPerFetch: 1 }\n): CallResult[] {\n  const { reducerPath, actions } = context\n  const callResults = useSelector((state: WithMulticallState) => state[reducerPath].callResults)\n  const dispatch = useDispatch()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? []\n      ),\n    [calls]\n  )\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!chainId || callKeys.length === 0) return undefined\n    const calls = callKeys.map((key) => parseCallKey(key))\n    dispatch(\n      actions.addMulticallListeners({\n        chainId,\n        calls,\n        options: { blocksPerFetch },\n      })\n    )\n\n    return () => {\n      dispatch(\n        actions.removeMulticallListeners({\n          chainId,\n          calls,\n          options: { blocksPerFetch },\n        })\n      )\n    }\n  }, [actions, chainId, dispatch, blocksPerFetch, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      calls.map<CallResult>((call) => {\n        if (!chainId || !call) return INVALID_RESULT\n\n        const result = callResults[chainId]?.[toCallKey(call)]\n        let data\n        if (result?.data && result?.data !== '0x') {\n          data = result.data\n        }\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, chainId]\n  )\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: utils.Interface | undefined,\n  fragment: utils.FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: CallStateResult | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result,\n    error: !success,\n  }\n}\n\n// formats many calls to a single function on a single contract, with the function name and inputs specified\nexport function useSingleContractMultipleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options: Partial<ListenerOptions> & { gasRequired?: number } = {}\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  // encode callDatas\n  const callDatas = useMemo(\n    () =>\n      contract && fragment\n        ? callInputs.map<string | undefined>((callInput) =>\n            isValidMethodArgs(callInput) ? contract.interface.encodeFunctionData(fragment, callInput) : undefined\n          )\n        : [],\n    [callInputs, contract, fragment]\n  )\n\n  const gasRequired = options?.gasRequired\n  const blocksPerFetch = options?.blocksPerFetch\n\n  // encode calls\n  const calls = useMemo(\n    () =>\n      contract\n        ? callDatas.map<Call | undefined>((callData) =>\n            callData\n              ? {\n                  address: contract.address,\n                  callData,\n                  gasRequired,\n                }\n              : undefined\n          )\n        : [],\n    [contract, callDatas, gasRequired]\n  )\n\n  const results = useCallsData(context, chainId, calls, blocksPerFetch ? { blocksPerFetch } : undefined)\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber))\n  }, [results, contract, fragment, latestBlockNumber])\n}\n\nexport function useMultipleContractSingleData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  addresses: (string | undefined)[],\n  contractInterface: utils.Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options: Partial<ListenerOptions> & { gasRequired?: number } = {}\n): CallState[] {\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n\n  // encode callData\n  const callData: string | undefined = useMemo(\n    () => (isValidMethodArgs(callInputs) ? contractInterface.encodeFunctionData(fragment, callInputs) : undefined),\n    [callInputs, contractInterface, fragment]\n  )\n\n  const gasRequired = options?.gasRequired\n  const blocksPerFetch = options?.blocksPerFetch\n\n  // encode calls\n  const calls = useMemo(\n    () =>\n      callData\n        ? addresses.map<Call | undefined>((address) => {\n            return address\n              ? {\n                  address,\n                  callData,\n                  gasRequired,\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, gasRequired]\n  )\n\n  const results = useCallsData(context, chainId, calls, blocksPerFetch ? { blocksPerFetch } : undefined)\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber))\n  }, [fragment, results, contractInterface, latestBlockNumber])\n}\n\nexport function useSingleCallResult(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options: Partial<ListenerOptions> & { gasRequired?: number } = {}\n): CallState {\n  return (\n    useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, [inputs], options)[0] ??\n    INVALID_CALL_STATE\n  )\n}\n\n// formats many calls to any number of functions on a single contract, with only the calldata specified\nexport function useSingleContractWithCallData(\n  context: MulticallContext,\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined,\n  contract: Contract | null | undefined,\n  callDatas: string[],\n  options: Partial<ListenerOptions> & { gasRequired?: number } = {}\n): CallState[] {\n  const gasRequired = options?.gasRequired\n  const blocksPerFetch = options?.blocksPerFetch\n\n  // encode calls\n  const calls = useMemo(\n    () =>\n      contract\n        ? callDatas.map<Call>((callData) => {\n            return {\n              address: contract.address,\n              callData,\n              gasRequired,\n            }\n          })\n        : [],\n    [contract, callDatas, gasRequired]\n  )\n\n  const results = useCallsData(context, chainId, calls, blocksPerFetch ? { blocksPerFetch } : undefined)\n\n  return useMemo(() => {\n    return results.map((result, i) =>\n      toCallState(\n        result,\n        contract?.interface,\n        contract?.interface?.getFunction(callDatas[i].substring(0, 10)),\n        latestBlockNumber\n      )\n    )\n  }, [results, contract, callDatas, latestBlockNumber])\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { MulticallFetchingPayload, MulticallListenerPayload, MulticallResultsPayload, MulticallState } from './types'\nimport { toCallKey } from './utils/callKeys'\n\nconst initialState: MulticallState = {\n  callResults: {},\n}\n\nexport function createMulticallSlice(reducerPath: string) {\n  return createSlice({\n    name: reducerPath,\n    initialState,\n    reducers: {\n      addMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n        listeners[chainId] = listeners[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          listeners[chainId][callKey] = listeners[chainId][callKey] ?? {}\n          listeners[chainId][callKey][blocksPerFetch] = (listeners[chainId][callKey][blocksPerFetch] ?? 0) + 1\n        })\n      },\n\n      removeMulticallListeners: (state, action: PayloadAction<MulticallListenerPayload>) => {\n        const {\n          calls,\n          chainId,\n          options: { blocksPerFetch },\n        } = action.payload\n        const listeners: MulticallState['callListeners'] = state.callListeners\n          ? state.callListeners\n          : (state.callListeners = {})\n\n        if (!listeners[chainId]) return\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          if (!listeners[chainId][callKey]) return\n          if (!listeners[chainId][callKey][blocksPerFetch]) return\n\n          if (listeners[chainId][callKey][blocksPerFetch] === 1) {\n            delete listeners[chainId][callKey][blocksPerFetch]\n          } else {\n            listeners[chainId][callKey][blocksPerFetch]--\n          }\n        })\n      },\n\n      fetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current) {\n            state.callResults[chainId][callKey] = {\n              fetchingBlockNumber,\n            }\n          } else {\n            if ((current.fetchingBlockNumber ?? 0) >= fetchingBlockNumber) return\n            state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      errorFetchingMulticallResults: (state, action: PayloadAction<MulticallFetchingPayload>) => {\n        const { chainId, fetchingBlockNumber, calls } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        calls.forEach((call) => {\n          const callKey = toCallKey(call)\n          const current = state.callResults[chainId][callKey]\n          if (!current || typeof current.fetchingBlockNumber !== 'number') return // only should be dispatched if we are already fetching\n          if (current.fetchingBlockNumber <= fetchingBlockNumber) {\n            delete current.fetchingBlockNumber\n            current.data = null\n            current.blockNumber = fetchingBlockNumber\n          }\n        })\n      },\n\n      updateMulticallResults: (state, action: PayloadAction<MulticallResultsPayload>) => {\n        const { chainId, results, blockNumber } = action.payload\n        state.callResults[chainId] = state.callResults[chainId] ?? {}\n        Object.keys(results).forEach((callKey) => {\n          const current = state.callResults[chainId][callKey]\n          if ((current?.blockNumber ?? 0) > blockNumber) return\n          state.callResults[chainId][callKey] = {\n            data: results[callKey],\n            blockNumber,\n          }\n        })\n      },\n    },\n  })\n}\n\nexport type MulticallActions = ReturnType<typeof createMulticallSlice>['actions']\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/utils/retry.ts\n\nfunction wait(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction waitRandom(min: number, max: number): Promise<void> {\n  return wait(min + Math.round(Math.random() * Math.max(0, max - min)))\n}\n\n/**\n * This error is thrown if the function is cancelled before completing\n */\nclass CancelledError extends Error {\n  public isCancelledError: true = true\n  constructor() {\n    super('Cancelled')\n  }\n}\n\n/**\n * Throw this error if the function should retry\n */\nexport class RetryableError extends Error {\n  public isRetryableError: true = true\n}\n\nexport interface RetryOptions {\n  n: number\n  minWait: number\n  maxWait: number\n}\n\n/**\n * Retries the function that returns the promise until the promise successfully resolves up to n retries\n * @param fn function to retry\n * @param n how many times to retry\n * @param minWait min wait between retries in ms\n * @param maxWait max wait between retries in ms\n */\nexport function retry<T>(\n  fn: () => Promise<T>,\n  { n, minWait, maxWait }: RetryOptions\n): { promise: Promise<T>; cancel: () => void } {\n  let completed = false\n  let rejectCancelled: (error: Error) => void\n  const promise = new Promise<T>(async (resolve, reject) => {\n    rejectCancelled = reject\n    while (true) {\n      let result: T\n      try {\n        result = await fn()\n        if (!completed) {\n          resolve(result)\n          completed = true\n        }\n        break\n      } catch (error) {\n        if (completed) {\n          break\n        }\n        if (n <= 0 || !(error as any).isRetryableError) {\n          reject(error)\n          completed = true\n          break\n        }\n        n--\n      }\n      await waitRandom(minWait, maxWait)\n    }\n  })\n  return {\n    promise,\n    cancel: () => {\n      if (completed) return\n      completed = true\n      rejectCancelled(new CancelledError())\n    },\n  }\n}\n","import React, { useEffect, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport type { UniswapInterfaceMulticall } from './abi/types'\nimport { CHUNK_GAS_LIMIT, DEFAULT_CALL_GAS_REQUIRED } from './constants'\nimport type { MulticallContext } from './context'\nimport type { Call, MulticallState, WithMulticallState } from './types'\nimport { parseCallKey, toCallKey } from './utils/callKeys'\nimport chunkArray from './utils/chunkArray'\nimport { retry, RetryableError } from './utils/retry'\nimport useDebounce from './utils/useDebounce'\n\n/**\n * Fetches a chunk of calls, enforcing a minimum block number constraint\n * @param multicall multicall contract to fetch against\n * @param chunk chunk of calls to make\n * @param blockNumber block number passed as the block tag in the eth_call\n */\nasync function fetchChunk(\n  multicall: UniswapInterfaceMulticall,\n  chunk: Call[],\n  blockNumber: number,\n  isDebug?: boolean\n): Promise<{ success: boolean; returnData: string }[]> {\n  console.debug('Fetching chunk', chunk, blockNumber)\n  try {\n    const { returnData } = await multicall.callStatic.multicall(\n      chunk.map((obj) => ({\n        target: obj.address,\n        callData: obj.callData,\n        gasLimit: obj.gasRequired ?? DEFAULT_CALL_GAS_REQUIRED,\n      })),\n      // we aren't passing through the block gas limit we used to create the chunk, because it causes a problem with the integ tests\n      { blockTag: blockNumber }\n    )\n\n    if (isDebug) {\n      returnData.forEach(({ gasUsed, returnData, success }, i) => {\n        if (\n          !success &&\n          returnData.length === 2 &&\n          gasUsed.gte(Math.floor((chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED) * 0.95))\n        ) {\n          console.warn(\n            `A call failed due to requiring ${gasUsed.toString()} vs. allowed ${\n              chunk[i].gasRequired ?? DEFAULT_CALL_GAS_REQUIRED\n            }`,\n            chunk[i]\n          )\n        }\n      })\n    }\n\n    return returnData\n  } catch (e) {\n    const error = e as any\n    if (error.code === -32000 || error.message?.indexOf('header not found') !== -1) {\n      throw new RetryableError(`header not found for block number ${blockNumber}`)\n    } else if (error.code === -32603 || error.message?.indexOf('execution ran out of gas') !== -1) {\n      if (chunk.length > 1) {\n        if (process.env.NODE_ENV === 'development') {\n          console.debug('Splitting a chunk in 2', chunk)\n        }\n        const half = Math.floor(chunk.length / 2)\n        const [c0, c1] = await Promise.all([\n          fetchChunk(multicall, chunk.slice(0, half), blockNumber),\n          fetchChunk(multicall, chunk.slice(half, chunk.length), blockNumber),\n        ])\n        return c0.concat(c1)\n      }\n    }\n    console.error('Failed to fetch chunk', error)\n    throw error\n  }\n}\n\n/**\n * From the current all listeners state, return each call key mapped to the\n * minimum number of blocks per fetch. This is how often each key must be fetched.\n * @param allListeners the all listeners state\n * @param chainId the current chain id\n */\nexport function activeListeningKeys(\n  allListeners: MulticallState['callListeners'],\n  chainId?: number\n): { [callKey: string]: number } {\n  if (!allListeners || !chainId) return {}\n  const listeners = allListeners[chainId]\n  if (!listeners) return {}\n\n  return Object.keys(listeners).reduce<{ [callKey: string]: number }>((memo, callKey) => {\n    const keyListeners = listeners[callKey]\n\n    memo[callKey] = Object.keys(keyListeners)\n      .filter((key) => {\n        const blocksPerFetch = parseInt(key)\n        if (blocksPerFetch <= 0) return false\n        return keyListeners[blocksPerFetch] > 0\n      })\n      .reduce((previousMin, current) => {\n        return Math.min(previousMin, parseInt(current))\n      }, Infinity)\n    return memo\n  }, {})\n}\n\n/**\n * Return the keys that need to be refetched\n * @param callResults current call result state\n * @param listeningKeys each call key mapped to how old the data can be in blocks\n * @param chainId the current chain id\n * @param latestBlockNumber the latest block number\n */\nexport function outdatedListeningKeys(\n  callResults: MulticallState['callResults'],\n  listeningKeys: { [callKey: string]: number },\n  chainId: number | undefined,\n  latestBlockNumber: number | undefined\n): string[] {\n  if (!chainId || !latestBlockNumber) return []\n  const results = callResults[chainId]\n  // no results at all, load everything\n  if (!results) return Object.keys(listeningKeys)\n\n  return Object.keys(listeningKeys).filter((callKey) => {\n    const blocksPerFetch = listeningKeys[callKey]\n\n    const data = callResults[chainId][callKey]\n    // no data, must fetch\n    if (!data) return true\n\n    const minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1)\n\n    // already fetching it for a recent enough block, don't refetch it\n    if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false\n\n    // if data is older than minDataBlockNumber, fetch it\n    return !data.blockNumber || data.blockNumber < minDataBlockNumber\n  })\n}\n\nexport interface UpdaterProps {\n  context: MulticallContext\n  chainId: number | undefined // For now, one updater is required for each chainId to be watched\n  latestBlockNumber: number | undefined\n  contract: UniswapInterfaceMulticall\n  isDebug?: boolean\n}\n\nfunction Updater({ context, chainId, latestBlockNumber, contract, isDebug }: UpdaterProps): null {\n  const { actions, reducerPath } = context\n  const dispatch = useDispatch()\n  const state = useSelector((state: WithMulticallState) => state[reducerPath])\n  // wait for listeners to settle before triggering updates\n  const debouncedListeners = useDebounce(state.callListeners, 100)\n  const cancellations = useRef<{ blockNumber: number; cancellations: (() => void)[] }>()\n\n  const listeningKeys: { [callKey: string]: number } = useMemo(() => {\n    return activeListeningKeys(debouncedListeners, chainId)\n  }, [debouncedListeners, chainId])\n\n  const unserializedOutdatedCallKeys = useMemo(() => {\n    return outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber)\n  }, [chainId, state.callResults, listeningKeys, latestBlockNumber])\n\n  const serializedOutdatedCallKeys = useMemo(\n    () => JSON.stringify(unserializedOutdatedCallKeys.sort()),\n    [unserializedOutdatedCallKeys]\n  )\n\n  useEffect(() => {\n    if (!latestBlockNumber || !chainId || !contract) return\n\n    const outdatedCallKeys: string[] = JSON.parse(serializedOutdatedCallKeys)\n    if (outdatedCallKeys.length === 0) return\n    const calls = outdatedCallKeys.map((key) => parseCallKey(key))\n\n    const chunkedCalls = chunkArray(calls, CHUNK_GAS_LIMIT)\n\n    if (cancellations.current && cancellations.current.blockNumber !== latestBlockNumber) {\n      cancellations.current.cancellations.forEach((c) => c())\n    }\n\n    dispatch(\n      actions.fetchingMulticallResults({\n        calls,\n        chainId,\n        fetchingBlockNumber: latestBlockNumber,\n      })\n    )\n\n    cancellations.current = {\n      blockNumber: latestBlockNumber,\n      cancellations: chunkedCalls.map((chunk) => {\n        const { cancel, promise } = retry(() => fetchChunk(contract, chunk, latestBlockNumber, isDebug), {\n          n: Infinity,\n          minWait: 1000,\n          maxWait: 2500,\n        })\n        promise\n          .then((returnData) => {\n            // split the returned slice into errors and results\n            const { erroredCalls, results } = chunk.reduce<{\n              erroredCalls: Call[]\n              results: { [callKey: string]: string | null }\n            }>(\n              (memo, call, i) => {\n                if (returnData[i].success) {\n                  memo.results[toCallKey(call)] = returnData[i].returnData ?? null\n                } else {\n                  memo.erroredCalls.push(call)\n                }\n                return memo\n              },\n              { erroredCalls: [], results: {} }\n            )\n\n            // dispatch any new results\n            if (Object.keys(results).length > 0)\n              dispatch(\n                actions.updateMulticallResults({\n                  chainId,\n                  results,\n                  blockNumber: latestBlockNumber,\n                })\n              )\n\n            // dispatch any errored calls\n            if (erroredCalls.length > 0) {\n              if (isDebug) {\n                returnData.forEach((returnData, ix) => {\n                  if (!returnData.success) {\n                    console.debug('Call failed', chunk[ix], returnData)\n                  }\n                })\n              } else {\n                console.debug('Calls errored in fetch', erroredCalls)\n              }\n              dispatch(\n                actions.errorFetchingMulticallResults({\n                  calls: erroredCalls,\n                  chainId,\n                  fetchingBlockNumber: latestBlockNumber,\n                })\n              )\n            }\n          })\n          .catch((error: any) => {\n            if (error.isCancelledError) {\n              console.debug('Cancelled fetch for blockNumber', latestBlockNumber, chunk, chainId)\n              return\n            }\n            console.error('Failed to fetch multicall chunk', chunk, chainId, error)\n            dispatch(\n              actions.errorFetchingMulticallResults({\n                calls: chunk,\n                chainId,\n                fetchingBlockNumber: latestBlockNumber,\n              })\n            )\n          })\n        return cancel\n      }),\n    }\n  }, [actions, chainId, contract, dispatch, serializedOutdatedCallKeys, latestBlockNumber, isDebug])\n\n  return null\n}\n\nexport function createUpdater(context: MulticallContext) {\n  const UpdaterContextBound = (props: Omit<UpdaterProps, 'context'>) => {\n    return <Updater context={context} {...props} />\n  }\n  return UpdaterContextBound\n}\n","// TODO de-duplicate this file with web interface\n// https://github.com/Uniswap/interface/blob/main/src/hooks/useDebounce.ts\n\nimport { useEffect, useState } from 'react'\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value)\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value)\n    }, delay)\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debouncedValue\n}\n","import { DEFAULT_CHUNK_GAS_REQUIRED } from '../constants'\n\n// chunks array into chunks\n// evenly distributes items among the chunks\nexport default function chunkArray<T>(items: T[], chunkGasLimit: number): T[][] {\n  const chunks: T[][] = []\n  let currentChunk: T[] = []\n  let currentChunkCumulativeGas = 0\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    // calculate the gas required by the current item\n    const gasRequired = (item as { gasRequired?: number })?.gasRequired ?? DEFAULT_CHUNK_GAS_REQUIRED\n\n    // if the current chunk is empty, or the current item wouldn't push it over the gas limit,\n    // append the current item and increment the cumulative gas\n    if (currentChunk.length === 0 || currentChunkCumulativeGas + gasRequired < chunkGasLimit) {\n      currentChunk.push(item)\n      currentChunkCumulativeGas += gasRequired\n    } else {\n      // otherwise, push the current chunk and create a new chunk\n      chunks.push(currentChunk)\n      currentChunk = [item]\n      currentChunkCumulativeGas = gasRequired\n    }\n  }\n  if (currentChunk.length > 0) chunks.push(currentChunk)\n\n  return chunks\n}\n","import type { MulticallContext } from './context'\nimport {\n  useMultipleContractSingleData as _useMultipleContractSingleData,\n  useSingleCallResult as _useSingleCallResult,\n  useSingleContractMultipleData as _useSingleContractMultipleData,\n  useSingleContractWithCallData as _useSingleContractWithCallData,\n} from './hooks'\nimport { createMulticallSlice } from './slice'\nimport { createUpdater } from './updater'\n\ntype RemoveFirstFromTuple<T extends any[]> = T['length'] extends 0\n  ? undefined\n  : ((...b: T) => void) extends (a: any, ...b: infer I) => void\n  ? I\n  : []\ntype ParamsWithoutContext<T extends (...args: any) => any> = RemoveFirstFromTuple<Parameters<T>>\n\nexport interface MulticallOptions {\n  reducerPath?: string\n  // More options can be added here as multicall's capabilities are extended\n}\n\n// Inspired by RTK Query's createApi\nexport function createMulticall(options?: MulticallOptions) {\n  const reducerPath = options?.reducerPath ?? 'multicall'\n  const slice = createMulticallSlice(reducerPath)\n  const { actions, reducer } = slice\n  const context: MulticallContext = { reducerPath, actions }\n\n  const useMultipleContractSingleData = (...args: ParamsWithoutContext<typeof _useMultipleContractSingleData>) =>\n    _useMultipleContractSingleData(context, ...args)\n  const useSingleContractMultipleData = (...args: ParamsWithoutContext<typeof _useSingleContractMultipleData>) =>\n    _useSingleContractMultipleData(context, ...args)\n  const useSingleContractWithCallData = (...args: ParamsWithoutContext<typeof _useSingleContractWithCallData>) =>\n    _useSingleContractWithCallData(context, ...args)\n  const useSingleCallResult = (...args: ParamsWithoutContext<typeof _useSingleCallResult>) =>\n    _useSingleCallResult(context, ...args)\n  const hooks = {\n    useMultipleContractSingleData,\n    useSingleContractMultipleData,\n    useSingleContractWithCallData,\n    useSingleCallResult,\n  }\n\n  const Updater = createUpdater(context)\n\n  return {\n    reducerPath,\n    reducer,\n    actions,\n    hooks,\n    Updater,\n  }\n}\n"],"names":["INVALID_RESULT","valid","blockNumber","undefined","data","toCallKey","call","key","address","callData","gasRequired","Number","isSafeInteger","Error","parseCallKey","callKey","pcs","split","includes","length","parseInt","isMethodArg","x","BigNumber","isBigNumber","indexOf","isValidMethodArgs","Array","isArray","every","xi","useCallsData","context","chainId","calls","blocksPerFetch","reducerPath","actions","callResults","useSelector","state","dispatch","useDispatch","serializedCallKeys","useMemo","JSON","stringify","filter","c","Boolean","_calls$filter","map","_calls$filter$map","sort","useEffect","callKeys","parse","addMulticallListeners","options","removeMulticallListeners","result","_callResults$chainId","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useSingleContractMultipleData","contract","methodName","callInputs","_contract$interface","getFunction","callDatas","callInput","encodeFunctionData","_options","_options2","results","useMultipleContractSingleData","addresses","_options3","_options4","useSingleCallResult","inputs","useSingleContractWithCallData","_options5","_options6","i","_contract$interface2","substring","initialState","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","method","arg","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","__await","then","unwrapped","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","waitRandom","min","max","ms","Math","round","random","setTimeout","CancelledError","RetryableError","fetchChunk","multicall","chunk","isDebug","callStatic","target","gasLimit","blockTag","returnData","gasUsed","gte","floor","warn","toString","code","message","half","all","concat","Updater","debouncedValue","setDebouncedValue","debouncedListeners","useState","callListeners","handler","clearTimeout","cancellations","useRef","listeningKeys","allListeners","listeners","reduce","memo","keyListeners","previousMin","current","Infinity","activeListeningKeys","unserializedOutdatedCallKeys","minDataBlockNumber","fetchingBlockNumber","outdatedListeningKeys","serializedOutdatedCallKeys","outdatedCallKeys","chunkedCalls","items","chunkGasLimit","chunks","currentChunk","currentChunkCumulativeGas","item","chunkArray","fetchingMulticallResults","rejectCancelled","n","minWait","maxWait","completed","promise","_context","isRetryableError","cancel","retry","erroredCalls","updateMulticallResults","ix","errorFetchingMulticallResults","isCancelledError","createUpdater","props","React","createSlice","reducers","action","payload","createMulticallSlice","reducer","hooks","args","_useMultipleContractSingleData","_useSingleContractMultipleData","_useSingleContractWithCallData","_useSingleCallResult"],"mappings":"+NAQaA,EAA6B,CAAEC,OAAO,EAAOC,iBAAaC,EAAWC,UAAMD,4uDCNxEE,EAAUC,OACpBC,EAASD,EAAKE,YAAWF,EAAKG,YAC9BH,EAAKI,YAAa,KACfC,OAAOC,cAAcN,EAAKI,mBACvB,IAAIG,yBAAyBP,EAAKI,aAE1CH,OAAWD,EAAKI,mBAEXH,WAGOO,EAAaC,OACrBC,EAAMD,EAAQE,MAAM,SACrB,CAAC,EAAG,GAAGC,SAASF,EAAIG,cACjB,IAAIN,2BAA2BE,aAGrCP,QAASQ,EAAI,GACbP,SAAUO,EAAI,IACVA,EAAI,GAAK,CAAEN,YAAaC,OAAOS,SAASJ,EAAI,KAAQ,ICR5D,SAASK,EAAYC,UACZC,YAAUC,YAAYF,KAAkD,IAA5C,CAAC,SAAU,UAAUG,eAAeH,GAGzE,SAASI,EAAkBJ,eAEjBnB,IAANmB,GACCK,MAAMC,QAAQN,IAAMA,EAAEO,OAAM,SAACC,UAAOT,EAAYS,IAAQH,MAAMC,QAAQE,IAAOA,EAAGD,MAAMR,MAK3F,SAASU,EACPC,EACAC,EACAC,SACEC,cAAoC,CAAEA,eAAgB,MAAtDA,eAEMC,EAAyBJ,EAAzBI,YAAaC,EAAYL,EAAZK,QACfC,EAAcC,eAAY,SAACC,UAA8BA,EAAMJ,GAAaE,eAC5EG,EAAWC,gBAEXC,EAA6BC,WACjC,4BACEC,KAAKC,yBACHZ,YAAAA,EACIa,QAAO,SAACC,UAAiBC,QAAQD,iBADrCE,EAEIC,IAAI9C,WAFR+C,EAGIC,UAAU,MAElB,CAACnB,WAIHoB,aAAU,eACFC,EAAqBV,KAAKW,MAAMb,MACjCV,GAA+B,IAApBsB,EAASpC,YACnBe,EAAQqB,EAASJ,KAAI,SAAC5C,UAAQO,EAAaP,aACjDkC,EACEJ,EAAQoB,sBAAsB,CAC5BxB,QAAAA,EACAC,MAAAA,EACAwB,QAAS,CAAEvB,eAAAA,MAIR,WACLM,EACEJ,EAAQsB,yBAAyB,CAC/B1B,QAAAA,EACAC,MAAAA,EACAwB,QAAS,CAAEvB,eAAAA,UAIhB,CAACE,EAASJ,EAASQ,EAAUN,EAAgBQ,IAEzCC,WACL,kBACEV,EAAMiB,KAAgB,SAAC7C,aAChB2B,IAAY3B,EAAM,OAAON,MAG1BI,EADEwD,WAAStB,EAAYL,WAAZ4B,EAAuBxD,EAAUC,iBAE5CsD,GAAAA,EAAQxD,MAAyB,cAAjBwD,SAAAA,EAAQxD,QAC1BA,EAAOwD,EAAOxD,MAGT,CAAEH,OAAO,EAAMG,KAAAA,EAAMF,kBAAa0D,SAAAA,EAAQ1D,kBAErD,CAACoC,EAAaJ,EAAOD,IAIzB,IAAM6B,EAAgC,CAAE7D,OAAO,EAAO2D,YAAQzD,EAAW4D,SAAS,EAAOC,SAAS,EAAOC,OAAO,GAC1GC,EAAgC,CAAEjE,OAAO,EAAM2D,YAAQzD,EAAW4D,SAAS,EAAMC,SAAS,EAAMC,OAAO,GAE7G,SAASE,EACPC,EACAC,EACAC,EACAC,OAEKH,EAAY,OAAON,MAChB7D,EAA6BmE,EAA7BnE,MAAOG,EAAsBgE,EAAtBhE,KAAMF,EAAgBkE,EAAhBlE,gBAChBD,EAAO,OAAO6D,KACf7D,IAAUC,EAAa,OAAOgE,MAC7BG,IAAsBC,IAAaC,EAAmB,OAAOL,MAC5DM,EAAUpE,GAAQA,EAAKe,OAAS,EAChC6C,SAAW9D,EAAAA,EAAe,GAAKqE,EACjCX,OAAsCzD,KACtCqE,GAAWpE,MAEXwD,EAASS,EAAkBI,qBAAqBH,EAAUlE,GAC1D,MAAO6D,UACPS,QAAQC,MAAM,6BAA8BL,EAAUlE,GAC/C,CACLH,OAAO,EACP8D,SAAS,EACTE,OAAO,EACPD,QAAAA,EACAJ,OAAAA,SAIC,CACL3D,OAAO,EACP8D,SAAS,EACTC,QAAAA,EACAJ,OAAAA,EACAK,OAAQO,YAKII,EACd5C,EACAC,EACAsC,EACAM,EACAC,EACAC,EACArB,oBAAAA,IAAAA,EAA+D,QAEzDY,EAAW1B,WAAQ,8BAAMiC,YAAAA,oBAAAG,EAAqBC,YAAYH,KAAa,CAACD,EAAUC,IAGlFI,EAAYtC,WAChB,kBACEiC,GAAYP,EACRS,EAAW5B,KAAwB,SAACgC,UAClCzD,EAAkByD,GAAaN,YAAmBO,mBAAmBd,EAAUa,QAAahF,KAE9F,KACN,CAAC4E,EAAYF,EAAUP,IAGnB5D,WAAcgD,UAAA2B,EAAS3E,YACvByB,WAAiBuB,UAAA4B,EAASnD,eAmB1BoD,EAAUxD,EAAaC,EAASC,EAhBxBW,WACZ,kBACEiC,EACIK,EAAU/B,KAAsB,SAAC1C,UAC/BA,EACI,CACED,QAASqE,EAASrE,QAClBC,SAAAA,EACAC,YAAAA,QAEFP,KAEN,KACN,CAAC0E,EAAUK,EAAWxE,IAG8ByB,EAAiB,CAAEA,eAAAA,QAAmBhC,UAErFyC,WAAQ,kBACN2C,EAAQpC,KAAI,SAACS,UAAWO,EAAYP,QAAQiB,SAAAA,YAAqBP,EAAUC,QACjF,CAACgB,EAASV,EAAUP,EAAUC,aAGnBiB,EACdxD,EACAC,EACAsC,EACAkB,EACApB,EACAS,EACAC,EACArB,oBAAAA,IAAAA,EAA+D,QAEzDY,EAAW1B,WAAQ,kBAAMyB,EAAkBY,YAAYH,KAAa,CAACT,EAAmBS,IAGxFrE,EAA+BmC,WACnC,kBAAOlB,EAAkBqD,GAAcV,EAAkBe,mBAAmBd,EAAUS,QAAc5E,IACpG,CAAC4E,EAAYV,EAAmBC,IAG5B5D,WAAcgD,UAAAgC,EAAShF,YACvByB,WAAiBuB,UAAAiC,EAASxD,eAmB1BoD,EAAUxD,EAAaC,EAASC,EAhBxBW,WACZ,kBACEnC,EACIgF,EAAUtC,KAAsB,SAAC3C,UACxBA,EACH,CACEA,QAAAA,EACAC,SAAAA,EACAC,YAAAA,QAEFP,KAEN,KACN,CAACsF,EAAWhF,EAAUC,IAG8ByB,EAAiB,CAAEA,eAAAA,QAAmBhC,UAErFyC,WAAQ,kBACN2C,EAAQpC,KAAI,SAACS,UAAWO,EAAYP,EAAQS,EAAmBC,EAAUC,QAC/E,CAACD,EAAUiB,EAASlB,EAAmBE,aAG5BqB,EACd5D,EACAC,EACAsC,EACAM,EACAC,EACAe,EACAnC,yBAAAA,IAAAA,EAA+D,aAG7DkB,EAA8B5C,EAASC,EAASsC,EAAmBM,EAAUC,EAAY,CAACe,GAASnC,GAAS,MAC5GI,WAKYgC,EACd9D,EACAC,EACAsC,EACAM,EACAK,EACAxB,oBAAAA,IAAAA,EAA+D,QAEzDhD,WAAcgD,UAAAqC,EAASrF,YACvByB,WAAiBuB,UAAAsC,EAAS7D,eAiB1BoD,EAAUxD,EAAaC,EAASC,EAdxBW,WACZ,kBACEiC,EACIK,EAAU/B,KAAU,SAAC1C,SACZ,CACLD,QAASqE,EAASrE,QAClBC,SAAAA,EACAC,YAAAA,MAGJ,KACN,CAACmE,EAAUK,EAAWxE,IAG8ByB,EAAiB,CAAEA,eAAAA,QAAmBhC,UAErFyC,WAAQ,kBACN2C,EAAQpC,KAAI,SAACS,EAAQqC,gBAC1B9B,EACEP,QACAiB,SAAAA,kBACAA,YAAAA,oBAAAqB,EAAqBjB,YAAYC,EAAUe,GAAGE,UAAU,EAAG,KAC3D5B,QAGH,CAACgB,EAASV,EAAUK,EAAWX,UC/Q9B6B,EAA+B,CACnC9D,YAAa,mBCEf,IAAI+D,EAAW,SAAUC,GAGvB,IAAIC,EAAKC,OAAOC,UACZC,EAASH,EAAGI,eAEZC,EAA4B,mBAAXC,OAAwBA,OAAS,GAClDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOC,EAAK9G,EAAK+G,GAOxB,OANAd,OAAOe,eAAeF,EAAK9G,EAAK,CAC9B+G,MAAOA,EACPE,YAAY,EACZC,cAAc,EACdC,UAAU,IAELL,EAAI9G,GAEb,IAEE6G,EAAO,GAAI,IACX,MAAOO,GACPP,EAAS,SAASC,EAAK9G,EAAK+G,GAC1B,OAAOD,EAAI9G,GAAO+G,GAItB,SAASM,EAAKC,EAASC,EAASC,EAAMC,GAEpC,IACIC,EAAYzB,OAAO0B,QADFJ,GAAWA,EAAQrB,qBAAqB0B,EAAYL,EAAUK,GACtC1B,WACzCzE,EAAU,IAAIoG,EAAQJ,GAAe,IAMzC,OAFAC,EAAUI,QAuMZ,SAA0BR,EAASE,EAAM/F,GACvC,IAAIQ,EAhLuB,iBAkL3B,OAAO,SAAgB8F,EAAQC,GAC7B,GAjLoB,cAiLhB/F,EACF,MAAM,IAAI3B,MAAM,gCAGlB,GApLoB,cAoLhB2B,EAA6B,CAC/B,GAAe,UAAX8F,EACF,MAAMC,EAKR,MAoQG,CAAEjB,WA1fPnH,EA0fyBqI,MAAM,GA9P/B,IAHAxG,EAAQsG,OAASA,EACjBtG,EAAQuG,IAAMA,IAED,CACX,IAAIE,EAAWzG,EAAQyG,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUzG,GACnD,GAAI0G,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnB1G,EAAQsG,OAGVtG,EAAQ6G,KAAO7G,EAAQ8G,MAAQ9G,EAAQuG,SAElC,GAAuB,UAAnBvG,EAAQsG,OAAoB,CACrC,GApNqB,mBAoNjB9F,EAEF,MADAA,EAlNc,YAmNRR,EAAQuG,IAGhBvG,EAAQ+G,kBAAkB/G,EAAQuG,SAEN,WAAnBvG,EAAQsG,QACjBtG,EAAQgH,OAAO,SAAUhH,EAAQuG,KAGnC/F,EA7NkB,YA+NlB,IAAIyG,EAASC,EAASrB,EAASE,EAAM/F,GACrC,GAAoB,WAAhBiH,EAAOE,KAAmB,CAO5B,GAJA3G,EAAQR,EAAQwG,KAlOA,YAFK,iBAwOjBS,EAAOV,MAAQK,EACjB,SAGF,MAAO,CACLtB,MAAO2B,EAAOV,IACdC,KAAMxG,EAAQwG,MAGS,UAAhBS,EAAOE,OAChB3G,EAhPgB,YAmPhBR,EAAQsG,OAAS,QACjBtG,EAAQuG,IAAMU,EAAOV,OA/QPa,CAAiBvB,EAASE,EAAM/F,GAE7CiG,EAcT,SAASiB,EAASG,EAAIhC,EAAKkB,GACzB,IACE,MAAO,CAAEY,KAAM,SAAUZ,IAAKc,EAAG/I,KAAK+G,EAAKkB,IAC3C,MAAOZ,GACP,MAAO,CAAEwB,KAAM,QAASZ,IAAKZ,IAhBjCrB,EAAQsB,KAAOA,EAoBf,IAOIgB,EAAmB,GAMvB,SAAST,KACT,SAASmB,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxBpC,EAAOoC,EAAmB1C,GAAgB,WACxC,OAAO2C,QAGT,IAAIC,EAAWlD,OAAOmD,eAClBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MAC/DD,GACAA,IAA4BrD,GAC5BG,EAAOpG,KAAKsJ,EAAyB9C,KAGvC0C,EAAoBI,GAGtB,IAAIE,EAAKP,EAA2B9C,UAClC0B,EAAU1B,UAAYD,OAAO0B,OAAOsB,GAYtC,SAASO,EAAsBtD,GAC7B,CAAC,OAAQ,QAAS,UAAUuD,SAAQ,SAAS1B,GAC3ClB,EAAOX,EAAW6B,GAAQ,SAASC,GACjC,OAAOkB,KAAKpB,QAAQC,EAAQC,SAkClC,SAAS0B,EAAchC,EAAWiC,GAgChC,IAAIC,EAgCJV,KAAKpB,QA9BL,SAAiBC,EAAQC,GACvB,SAAS6B,IACP,OAAO,IAAIF,GAAY,SAASG,EAASC,IAnC7C,SAASC,EAAOjC,EAAQC,EAAK8B,EAASC,GACpC,IAAIrB,EAASC,EAASjB,EAAUK,GAASL,EAAWM,GACpD,GAAoB,UAAhBU,EAAOE,KAEJ,CACL,IAAIvF,EAASqF,EAAOV,IAChBjB,EAAQ1D,EAAO0D,MACnB,OAAIA,GACiB,iBAAVA,GACPZ,EAAOpG,KAAKgH,EAAO,WACd4C,EAAYG,QAAQ/C,EAAMkD,SAASC,MAAK,SAASnD,GACtDiD,EAAO,OAAQjD,EAAO+C,EAASC,MAC9B,SAAS3C,GACV4C,EAAO,QAAS5C,EAAK0C,EAASC,MAI3BJ,EAAYG,QAAQ/C,GAAOmD,MAAK,SAASC,GAI9C9G,EAAO0D,MAAQoD,EACfL,EAAQzG,MACP,SAASK,GAGV,OAAOsG,EAAO,QAAStG,EAAOoG,EAASC,MAvBzCA,EAAOrB,EAAOV,KAiCZgC,CAAOjC,EAAQC,EAAK8B,EAASC,MAIjC,OAAOH,EAaLA,EAAkBA,EAAgBM,KAChCL,EAGAA,GACEA,KAkHV,SAASzB,EAAoBF,EAAUzG,GACrC,IAAIsG,EAASG,EAAS1B,SAAS/E,EAAQsG,QACvC,QA3TEnI,IA2TEmI,EAAsB,CAKxB,GAFAtG,EAAQyG,SAAW,KAEI,UAAnBzG,EAAQsG,OAAoB,CAE9B,GAAIG,EAAS1B,SAAiB,SAG5B/E,EAAQsG,OAAS,SACjBtG,EAAQuG,SAtUZpI,EAuUIwI,EAAoBF,EAAUzG,GAEP,UAAnBA,EAAQsG,QAGV,OAAOM,EAIX5G,EAAQsG,OAAS,QACjBtG,EAAQuG,IAAM,IAAIoC,UAChB,kDAGJ,OAAO/B,EAGT,IAAIK,EAASC,EAASZ,EAAQG,EAAS1B,SAAU/E,EAAQuG,KAEzD,GAAoB,UAAhBU,EAAOE,KAIT,OAHAnH,EAAQsG,OAAS,QACjBtG,EAAQuG,IAAMU,EAAOV,IACrBvG,EAAQyG,SAAW,KACZG,EAGT,IAAIgC,EAAO3B,EAAOV,IAElB,OAAMqC,EAOFA,EAAKpC,MAGPxG,EAAQyG,EAASoC,YAAcD,EAAKtD,MAGpCtF,EAAQ8I,KAAOrC,EAASsC,QAQD,WAAnB/I,EAAQsG,SACVtG,EAAQsG,OAAS,OACjBtG,EAAQuG,SA1XVpI,GAoYF6B,EAAQyG,SAAW,KACZG,GANEgC,GA3BP5I,EAAQsG,OAAS,QACjBtG,EAAQuG,IAAM,IAAIoC,UAAU,oCAC5B3I,EAAQyG,SAAW,KACZG,GAoDX,SAASoC,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxBxB,KAAK8B,WAAWC,KAAKN,GAGvB,SAASO,EAAcP,GACrB,IAAIjC,EAASiC,EAAMQ,YAAc,GACjCzC,EAAOE,KAAO,gBACPF,EAAOV,IACd2C,EAAMQ,WAAazC,EAGrB,SAASb,EAAQJ,GAIfyB,KAAK8B,WAAa,CAAC,CAAEJ,OAAQ,SAC7BnD,EAAYgC,QAAQgB,EAAcvB,MAClCA,KAAKkC,OAAM,GA8Bb,SAAS9B,EAAO+B,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS9E,GAC9B,GAAI+E,EACF,OAAOA,EAAevL,KAAKsL,GAG7B,GAA6B,mBAAlBA,EAASd,KAClB,OAAOc,EAGT,IAAKE,MAAMF,EAASzK,QAAS,CAC3B,IAAI8E,GAAK,EAAG6E,EAAO,SAASA,IAC1B,OAAS7E,EAAI2F,EAASzK,QACpB,GAAIuF,EAAOpG,KAAKsL,EAAU3F,GAGxB,OAFA6E,EAAKxD,MAAQsE,EAAS3F,GACtB6E,EAAKtC,MAAO,EACLsC,EAOX,OAHAA,EAAKxD,WA1eTnH,EA2eI2K,EAAKtC,MAAO,EAELsC,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAMiB,GAIjB,SAASA,IACP,MAAO,CAAEzE,WA1fPnH,EA0fyBqI,MAAM,GA+MnC,OA7mBAc,EAAkB7C,UAAY8C,EAC9BnC,EAAO0C,EAAI,cAAeP,GAC1BnC,EAAOmC,EAA4B,cAAeD,GAClDA,EAAkB0C,YAAc5E,EAC9BmC,EACArC,EACA,qBAaFZ,EAAQ2F,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOE,YAClD,QAAOD,IACHA,IAAS7C,GAG2B,uBAAnC6C,EAAKH,aAAeG,EAAKE,QAIhC/F,EAAQgG,KAAO,SAASJ,GAQtB,OAPI1F,OAAO+F,eACT/F,OAAO+F,eAAeL,EAAQ3C,IAE9B2C,EAAOM,UAAYjD,EACnBnC,EAAO8E,EAAQhF,EAAmB,sBAEpCgF,EAAOzF,UAAYD,OAAO0B,OAAO4B,GAC1BoC,GAOT5F,EAAQmG,MAAQ,SAASlE,GACvB,MAAO,CAAEiC,QAASjC,IAsEpBwB,EAAsBE,EAAcxD,WACpCW,EAAO6C,EAAcxD,UAAWO,GAAqB,WACnD,OAAOyC,QAETnD,EAAQ2D,cAAgBA,EAKxB3D,EAAQoG,MAAQ,SAAS7E,EAASC,EAASC,EAAMC,EAAakC,QACxC,IAAhBA,IAAwBA,EAAcyC,SAE1C,IAAIC,EAAO,IAAI3C,EACbrC,EAAKC,EAASC,EAASC,EAAMC,GAC7BkC,GAGF,OAAO5D,EAAQ2F,oBAAoBnE,GAC/B8E,EACAA,EAAK9B,OAAOL,MAAK,SAAS7G,GACxB,OAAOA,EAAO4E,KAAO5E,EAAO0D,MAAQsF,EAAK9B,WAuKjDf,EAAsBD,GAEtB1C,EAAO0C,EAAI5C,EAAmB,aAO9BE,EAAO0C,EAAIhD,GAAgB,WACzB,OAAO2C,QAGTrC,EAAO0C,EAAI,YAAY,WACrB,MAAO,wBAkCTxD,EAAQuG,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAItM,KAAOuM,EACdD,EAAKrB,KAAKjL,GAMZ,OAJAsM,EAAKE,UAIE,SAASjC,IACd,KAAO+B,EAAK1L,QAAQ,CAClB,IAAIZ,EAAMsM,EAAKG,MACf,GAAIzM,KAAOuM,EAGT,OAFAhC,EAAKxD,MAAQ/G,EACbuK,EAAKtC,MAAO,EACLsC,EAQX,OADAA,EAAKtC,MAAO,EACLsC,IAsCXxE,EAAQuD,OAASA,EAMjBzB,EAAQ3B,UAAY,CAClB2F,YAAahE,EAEbuD,MAAO,SAASsB,GAcd,GAbAxD,KAAKyD,KAAO,EACZzD,KAAKqB,KAAO,EAGZrB,KAAKZ,KAAOY,KAAKX,WArgBjB3I,EAsgBAsJ,KAAKjB,MAAO,EACZiB,KAAKhB,SAAW,KAEhBgB,KAAKnB,OAAS,OACdmB,KAAKlB,SA1gBLpI,EA4gBAsJ,KAAK8B,WAAWvB,QAAQyB,IAEnBwB,EACH,IAAK,IAAIZ,KAAQ5C,KAEQ,MAAnB4C,EAAKc,OAAO,IACZzG,EAAOpG,KAAKmJ,KAAM4C,KACjBP,OAAOO,EAAKe,MAAM,MACrB3D,KAAK4C,QAphBXlM,IA0hBFkN,KAAM,WACJ5D,KAAKjB,MAAO,EAEZ,IACI8E,EADY7D,KAAK8B,WAAW,GACLG,WAC3B,GAAwB,UAApB4B,EAAWnE,KACb,MAAMmE,EAAW/E,IAGnB,OAAOkB,KAAK8D,MAGdxE,kBAAmB,SAASyE,GAC1B,GAAI/D,KAAKjB,KACP,MAAMgF,EAGR,IAAIxL,EAAUyH,KACd,SAASgE,EAAOC,EAAKC,GAYnB,OAXA1E,EAAOE,KAAO,QACdF,EAAOV,IAAMiF,EACbxL,EAAQ8I,KAAO4C,EAEXC,IAGF3L,EAAQsG,OAAS,OACjBtG,EAAQuG,SArjBZpI,KAwjBYwN,EAGZ,IAAK,IAAI1H,EAAIwD,KAAK8B,WAAWpK,OAAS,EAAG8E,GAAK,IAAKA,EAAG,CACpD,IAAIiF,EAAQzB,KAAK8B,WAAWtF,GACxBgD,EAASiC,EAAMQ,WAEnB,GAAqB,SAAjBR,EAAMC,OAIR,OAAOsC,EAAO,OAGhB,GAAIvC,EAAMC,QAAU1B,KAAKyD,KAAM,CAC7B,IAAIU,EAAWlH,EAAOpG,KAAK4K,EAAO,YAC9B2C,EAAanH,EAAOpG,KAAK4K,EAAO,cAEpC,GAAI0C,GAAYC,EAAY,CAC1B,GAAIpE,KAAKyD,KAAOhC,EAAME,SACpB,OAAOqC,EAAOvC,EAAME,UAAU,GACzB,GAAI3B,KAAKyD,KAAOhC,EAAMG,WAC3B,OAAOoC,EAAOvC,EAAMG,iBAGjB,GAAIuC,GACT,GAAInE,KAAKyD,KAAOhC,EAAME,SACpB,OAAOqC,EAAOvC,EAAME,UAAU,OAG3B,CAAA,IAAIyC,EAMT,MAAM,IAAIhN,MAAM,0CALhB,GAAI4I,KAAKyD,KAAOhC,EAAMG,WACpB,OAAOoC,EAAOvC,EAAMG,gBAU9BrC,OAAQ,SAASG,EAAMZ,GACrB,IAAK,IAAItC,EAAIwD,KAAK8B,WAAWpK,OAAS,EAAG8E,GAAK,IAAKA,EAAG,CACpD,IAAIiF,EAAQzB,KAAK8B,WAAWtF,GAC5B,GAAIiF,EAAMC,QAAU1B,KAAKyD,MACrBxG,EAAOpG,KAAK4K,EAAO,eACnBzB,KAAKyD,KAAOhC,EAAMG,WAAY,CAChC,IAAIyC,EAAe5C,EACnB,OAIA4C,IACU,UAAT3E,GACS,aAATA,IACD2E,EAAa3C,QAAU5C,GACvBA,GAAOuF,EAAazC,aAGtByC,EAAe,MAGjB,IAAI7E,EAAS6E,EAAeA,EAAapC,WAAa,GAItD,OAHAzC,EAAOE,KAAOA,EACdF,EAAOV,IAAMA,EAETuF,GACFrE,KAAKnB,OAAS,OACdmB,KAAKqB,KAAOgD,EAAazC,WAClBzC,GAGFa,KAAKsE,SAAS9E,IAGvB8E,SAAU,SAAS9E,EAAQqC,GACzB,GAAoB,UAAhBrC,EAAOE,KACT,MAAMF,EAAOV,IAcf,MAXoB,UAAhBU,EAAOE,MACS,aAAhBF,EAAOE,KACTM,KAAKqB,KAAO7B,EAAOV,IACM,WAAhBU,EAAOE,MAChBM,KAAK8D,KAAO9D,KAAKlB,IAAMU,EAAOV,IAC9BkB,KAAKnB,OAAS,SACdmB,KAAKqB,KAAO,OACa,WAAhB7B,EAAOE,MAAqBmC,IACrC7B,KAAKqB,KAAOQ,GAGP1C,GAGToF,OAAQ,SAAS3C,GACf,IAAK,IAAIpF,EAAIwD,KAAK8B,WAAWpK,OAAS,EAAG8E,GAAK,IAAKA,EAAG,CACpD,IAAIiF,EAAQzB,KAAK8B,WAAWtF,GAC5B,GAAIiF,EAAMG,aAAeA,EAGvB,OAFA5B,KAAKsE,SAAS7C,EAAMQ,WAAYR,EAAMI,UACtCG,EAAcP,GACPtC,IAKbqF,MAAS,SAAS9C,GAChB,IAAK,IAAIlF,EAAIwD,KAAK8B,WAAWpK,OAAS,EAAG8E,GAAK,IAAKA,EAAG,CACpD,IAAIiF,EAAQzB,KAAK8B,WAAWtF,GAC5B,GAAIiF,EAAMC,SAAWA,EAAQ,CAC3B,IAAIlC,EAASiC,EAAMQ,WACnB,GAAoB,UAAhBzC,EAAOE,KAAkB,CAC3B,IAAI+E,EAASjF,EAAOV,IACpBkD,EAAcP,GAEhB,OAAOgD,GAMX,MAAM,IAAIrN,MAAM,0BAGlBsN,cAAe,SAASvC,EAAUf,EAAYE,GAa5C,OAZAtB,KAAKhB,SAAW,CACd1B,SAAU8C,EAAO+B,GACjBf,WAAYA,EACZE,QAASA,GAGS,SAAhBtB,KAAKnB,SAGPmB,KAAKlB,SA9rBPpI,GAisBOyI,IAQJtC,GAOsB8H,EAAO9H,SAGtC,IACE+H,mBAAqBhI,EACrB,MAAOiI,GAWmB,iBAAfC,WACTA,WAAWF,mBAAqBhI,EAEhCmI,SAAS,IAAK,yBAAdA,CAAwCnI,gCCxuB5C,SAASoI,EAAWC,EAAaC,UAJnBC,EAKAF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKF,IAAI,EAAGA,EAAMD,IAJxD,IAAI/B,SAAQ,SAACtC,UAAY2E,WAAW3E,EAASuE,MADtD,IAAcA,MAWRK,sDAGI,sCAFwB,uBADLpO,QAUhBqO,2FACqB,uBADErO,iBCPrBsO,0EAAf,WACEC,EACAC,EACAnP,EACAoP,yFAEA5K,QAAQC,MAAM,iBAAkB0K,EAAOnP,qBAERkP,EAAUG,WAAWH,UAChDC,EAAMlM,KAAI,SAACkE,eAAS,CAClBmI,OAAQnI,EAAI7G,QACZC,SAAU4G,EAAI5G,SACdgP,kBAAUpI,EAAI3G,eN3BmB,SM8BjCgP,SAAUxP,kBAPNyP,SAAAA,WAUJL,GACFK,EAAW3F,SAAQ,WAAmC/D,WAAhC2J,IAAAA,WAAqBpL,SAGjB,MAHKmL,WAGhBxO,QACXyO,EAAQC,IAAIhB,KAAKiB,MAA4D,cAArDT,EAAMpJ,GAAGvF,eNtCF,QMwC/BgE,QAAQqL,uCAC4BH,EAAQI,qCACxCX,EAAMpJ,GAAGvF,eN1CkB,KM4C7B2O,EAAMpJ,yBAMP0J,yCAGa,QADd1L,QACIgM,OAAmE,cAAhDhM,EAAMiM,kBAASzO,QAAQ,4CAC5C,IAAIyN,uCAAoDhP,eACrC,QAAhB+D,EAAMgM,OAA2E,cAAxDhM,EAAMiM,kBAASzO,QAAQ,mDACrD4N,EAAMlO,OAAS,2BAIXgP,EAAOtB,KAAKiB,MAAMT,EAAMlO,OAAS,aAChBwL,QAAQyD,IAAI,CACjCjB,EAAWC,EAAWC,EAAMjC,MAAM,EAAG+C,GAAOjQ,GAC5CiP,EAAWC,EAAWC,EAAMjC,MAAM+C,EAAMd,EAAMlO,QAASjB,oDAE/CmQ,4BAGd3L,QAAQT,MAAM,wBAAyBA,GACjCA,mFA6EV,SAASqM,SC9I8BhJ,IAC9BiJ,EAAgBC,ED6INxO,IAAAA,QAASC,IAAAA,QAASsC,IAAAA,kBAAmBM,IAAAA,SAAUyK,IAAAA,QACxDjN,EAAyBL,EAAzBK,QAASD,EAAgBJ,EAAhBI,YACXK,EAAWC,gBACXF,EAAQD,eAAY,SAACC,UAA8BA,EAAMJ,MAEzDqO,GClJCF,KAAqCG,WADPpJ,EDmJE9E,EAAMmO,mBClJtBH,OAEvBlN,aAAU,eAEFsN,EAAU5B,YAAW,WACzBwB,EAAkBlJ,KD6IsC,YCvInD,WACLuJ,aAAaD,MAEd,CAACtJ,EDoIwD,MClIrDiJ,GDmIDO,EAAgBC,WAEhBC,EAA+CpO,WAAQ,2BA1E7DqO,EACAhP,OAEKgP,IAAiBhP,EAAS,MAAO,OAChCiP,EAAYD,EAAahP,UAC1BiP,EAEE1K,OAAOqG,KAAKqE,GAAWC,QAAsC,SAACC,EAAMrQ,OACnEsQ,EAAeH,EAAUnQ,UAE/BqQ,EAAKrQ,GAAWyF,OAAOqG,KAAKwE,GACzBtO,QAAO,SAACxC,OACD4B,EAAiBf,SAASb,WAC5B4B,GAAkB,IACfkP,EAAalP,GAAkB,KAEvCgP,QAAO,SAACG,EAAaC,UACb1C,KAAKH,IAAI4C,EAAalQ,SAASmQ,MACrCC,UACEJ,IACN,IAfoB,GAsEdK,CAAoBhB,EAAoBxO,KAC9C,CAACwO,EAAoBxO,IAElByP,EAA+B9O,WAAQ,kBAhD/C,SACEN,EACA0O,EACA/O,EACAsC,UAEKtC,GAAYsC,EACDjC,EAAYL,GAIrBuE,OAAOqG,KAAKmE,GAAejO,QAAO,SAAChC,OAGlCX,EAAOkC,EAAYL,GAASlB,OAE7BX,EAAM,OAAO,MAEZuR,EAAqBpN,GANJyM,EAAcjQ,GAM4B,WAG7DX,EAAKwR,qBAAuBxR,EAAKwR,qBAAuBD,MAGpDvR,EAAKF,aAAeE,EAAKF,YAAcyR,MAf5BnL,OAAOqG,KAAKmE,GAHU,GA2ClCa,CAAsBrP,EAAMF,YAAa0O,EAAe/O,EAASsC,KACvE,CAACtC,EAASO,EAAMF,YAAa0O,EAAezM,IAEzCuN,EAA6BlP,WACjC,kBAAMC,KAAKC,UAAU4O,EAA6BrO,UAClD,CAACqO,WAGHpO,aAAU,cACHiB,GAAsBtC,GAAY4C,OAEjCkN,EAA6BlP,KAAKW,MAAMsO,MACd,IAA5BC,EAAiB5Q,YACfe,EAAQ6P,EAAiB5O,KAAI,SAAC5C,UAAQO,EAAaP,MAEnDyR,WE5K4BC,EAAYC,WAC1CC,EAAgB,GAClBC,EAAoB,GACpBC,EAA4B,EAEvBpM,EAAI,EAAGA,EAAIgM,EAAM9Q,OAAQ8E,IAAK,OAC/BqM,EAAOL,EAAMhM,GAGbvF,iBAAe4R,SAAAA,EAAmC5R,eRVlB,IQcV,IAAxB0R,EAAajR,QAAgBkR,EAA4B3R,ERblC,KQczB0R,EAAa5G,KAAK8G,GAClBD,GAA6B3R,IAG7ByR,EAAO3G,KAAK4G,GACZA,EAAe,CAACE,GAChBD,EAA4B3R,UAG5B0R,EAAajR,OAAS,GAAGgR,EAAO3G,KAAK4G,GAElCD,EFmJgBI,CAAWrQ,GAE5B4O,EAAcS,SAAWT,EAAcS,QAAQrR,cAAgBqE,GACjEuM,EAAcS,QAAQT,cAAc9G,SAAQ,SAAChH,UAAMA,OAGrDP,EACEJ,EAAQmQ,yBAAyB,CAC/BtQ,MAAAA,EACAD,QAAAA,EACA2P,oBAAqBrN,KAIzBuM,EAAcS,QAAU,CACtBrR,YAAaqE,EACbuM,cAAekB,EAAa7O,KAAI,SAACkM,kBDtJrChG,SAIIoJ,EAHFC,IAAAA,EAAGC,IAAAA,QAASC,IAAAA,QAEVC,GAAY,QA2BT,CACLC,QA1Bc,IAAInG,mCAAW,WAAOtC,EAASC,wEAC7CmI,EAAkBnI,gBAEZ1G,2BC+IsCuL,EAAWtK,EAAUwK,EAAO9K,EAAmB+K,iBD7IvF1L,SACKiP,IACHxI,EAAQzG,GACRiP,GAAY,8DAIVA,4DAGAH,GAAK,IAAOK,KAAcC,yCAC5B1I,QACAuI,GAAY,+BAGdH,6BAEIjE,EAAWkE,EAASC,6IAK5BK,OAAQ,WACFJ,IACJA,GAAY,EACZJ,EAAgB,IAAIxD,MCoHUiE,CAAM,EAA+D,CAC/FR,EAAGlB,SACHmB,QAAS,IACTC,QAAS,OAHHK,IAAAA,gBAAQH,QAMbrI,MAAK,SAACkF,SAE6BN,EAAM8B,QAItC,SAACC,EAAM9Q,EAAM2F,gBACP0J,EAAW1J,GAAGzB,QAChB4M,EAAK7L,QAAQlF,EAAUC,aAASqP,EAAW1J,GAAG0J,cAAc,KAE5DyB,EAAK+B,aAAa3H,KAAKlL,GAElB8Q,IAET,CAAE+B,aAAc,GAAI5N,QAAS,KAZvB4N,IAAAA,aAAc5N,IAAAA,QAgBlBiB,OAAOqG,KAAKtH,GAASpE,OAAS,GAChCsB,EACEJ,EAAQ+Q,uBAAuB,CAC7BnR,QAAAA,EACAsD,QAAAA,EACArF,YAAaqE,KAKf4O,EAAahS,OAAS,IACpBmO,EACFK,EAAW3F,SAAQ,SAAC2F,EAAY0D,GACzB1D,EAAWnL,SACdE,QAAQC,MAAM,cAAe0K,EAAMgE,GAAK1D,MAI5CjL,QAAQC,MAAM,yBAA0BwO,GAE1C1Q,EACEJ,EAAQiR,8BAA8B,CACpCpR,MAAOiR,EACPlR,QAAAA,EACA2P,oBAAqBrN,gBAKtB,SAACN,GACFA,EAAMsP,iBACR7O,QAAQC,MAAM,kCAAmCJ,EAAmB8K,EAAOpN,IAG7EyC,QAAQT,MAAM,kCAAmCoL,EAAOpN,EAASgC,GACjExB,EACEJ,EAAQiR,8BAA8B,CACpCpR,MAAOmN,EACPpN,QAAAA,EACA2P,oBAAqBrN,SAItB0O,UAGV,CAAC5Q,EAASJ,EAAS4C,EAAUpC,EAAUqP,EAA4BvN,EAAmB+K,IAElF,cAGOkE,EAAcxR,UACA,SAACyR,UACpBC,gBAACpD,iBAAQtO,QAASA,GAAayR,6BN1QX,yCACa,sCAHH,uCACC,kDAMG,CAC3CtR,eAAgBqP,2CSac9N,SACxBtB,iBAAcsB,SAAAA,EAAStB,eAAe,YACtCgL,WNjB6BhL,UAC5BuR,cAAY,CACjBtH,KAAMjK,EACNgE,aAAAA,EACAwN,SAAU,CACRnQ,sBAAuB,SAACjB,EAAOqR,WAKzBA,EAAOC,QAHT5R,IAAAA,MACAD,IAAAA,QACWE,IAAXuB,QAAWvB,eAEP+O,EAA6C1O,EAAMmO,cACrDnO,EAAMmO,cACLnO,EAAMmO,cAAgB,GAC3BO,EAAUjP,YAAWiP,EAAUjP,MAAY,GAC3CC,EAAM8H,SAAQ,SAAC1J,WACPS,EAAUV,EAAUC,GAC1B4Q,EAAUjP,GAASlB,YAAWmQ,EAAUjP,GAASlB,MAAY,GAC7DmQ,EAAUjP,GAASlB,GAASoB,aAAmB+O,EAAUjP,GAASlB,GAASoB,MAAmB,GAAK,MAIvGwB,yBAA0B,SAACnB,EAAOqR,SAK5BA,EAAOC,QAHT5R,IAAAA,MACAD,IAAAA,QACWE,IAAXuB,QAAWvB,eAEP+O,EAA6C1O,EAAMmO,cACrDnO,EAAMmO,cACLnO,EAAMmO,cAAgB,GAEtBO,EAAUjP,IACfC,EAAM8H,SAAQ,SAAC1J,OACPS,EAAUV,EAAUC,GACrB4Q,EAAUjP,GAASlB,IACnBmQ,EAAUjP,GAASlB,GAASoB,KAEmB,IAAhD+O,EAAUjP,GAASlB,GAASoB,UACvB+O,EAAUjP,GAASlB,GAASoB,GAEnC+O,EAAUjP,GAASlB,GAASoB,UAKlCqQ,yBAA0B,SAAChQ,EAAOqR,WACgBA,EAAOC,QAA/C7R,IAAAA,QAAS2P,IAAAA,oBAAqB1P,IAAAA,MACtCM,EAAMF,YAAYL,YAAWO,EAAMF,YAAYL,MAAY,GAC3DC,EAAM8H,SAAQ,SAAC1J,OACPS,EAAUV,EAAUC,GACpBiR,EAAU/O,EAAMF,YAAYL,GAASlB,MACtCwQ,EAIE,oBACAA,EAAQK,uBAAuB,IAAMA,EAAqB,OAC/DpP,EAAMF,YAAYL,GAASlB,GAAS6Q,oBAAsBA,OAL1DpP,EAAMF,YAAYL,GAASlB,GAAW,CACpC6Q,oBAAAA,OASR0B,8BAA+B,SAAC9Q,EAAOqR,WACWA,EAAOC,QAA/C7R,IAAAA,QAAS2P,IAAAA,oBAAqB1P,IAAAA,MACtCM,EAAMF,YAAYL,YAAWO,EAAMF,YAAYL,MAAY,GAC3DC,EAAM8H,SAAQ,SAAC1J,OACPS,EAAUV,EAAUC,GACpBiR,EAAU/O,EAAMF,YAAYL,GAASlB,GACtCwQ,GAAkD,iBAAhCA,EAAQK,qBAC3BL,EAAQK,qBAAuBA,WAC1BL,EAAQK,oBACfL,EAAQnR,KAAO,KACfmR,EAAQrR,YAAc0R,OAK5BwB,uBAAwB,SAAC5Q,EAAOqR,WACYA,EAAOC,QAAzC7R,IAAAA,QAASsD,IAAAA,QAASrF,IAAAA,YAC1BsC,EAAMF,YAAYL,YAAWO,EAAMF,YAAYL,MAAY,GAC3DuE,OAAOqG,KAAKtH,GAASyE,SAAQ,SAACjJ,SACtBwQ,EAAU/O,EAAMF,YAAYL,GAASlB,mBACtCwQ,SAAAA,EAASrR,eAAe,GAAKA,IAClCsC,EAAMF,YAAYL,GAASlB,GAAW,CACpCX,KAAMmF,EAAQxE,GACdb,YAAAA,WMrEI6T,CAAqB3R,GAC3BC,EAAqB+K,EAArB/K,QACFL,EAA4B,CAAEI,YAAAA,EAAaC,QAAAA,SAmB1C,CACLD,YAAAA,EACA4R,QAtB2B5G,EAAZ4G,QAuBf3R,QAAAA,EACA4R,MAbY,CACZzO,8BAToC,sCAAI0O,2BAAAA,yBACxCC,gBAA+BnS,UAAYkS,KAS3CtP,8BARoC,sCAAIsP,2BAAAA,yBACxCE,gBAA+BpS,UAAYkS,KAQ3CpO,8BAPoC,sCAAIoO,2BAAAA,yBACxCG,gBAA+BrS,UAAYkS,KAO3CtO,oBAN0B,sCAAIsO,2BAAAA,yBAC9BI,gBAAqBtS,UAAYkS,MAejC5D,QAPckD,EAAcxR"}